export interface FireEvent {
    copy(ele: Element, params?: ClipboardEventInit): void;
    cut(ele: Element, params?: ClipboardEventInit): void;
    paste(ele: Element, params?: ClipboardEventInit): void;
    compositionEnd(ele: Element, params?: CompositionEventInit): void;
    compositionStart(ele: Element, params?: CompositionEventInit): void;
    compositionUpdate(ele: Element, params?: CompositionEventInit): void;
    keyDown(ele: Element, params?: KeyboardEventInit): void;
    keyPress(ele: Element, params?: KeyboardEventInit): void;
    keyUp(ele: Element, params?: KeyboardEventInit): void;
    focus(ele: Element, params?: FocusEventInit): void;
    blur(ele: Element, params?: FocusEventInit): void;
    focusIn(ele: Element, params?: FocusEventInit): void;
    focusOut(ele: Element, params?: FocusEventInit): void;
    change(ele: Element, params?: EventInit): void;
    input(ele: Element, params?: InputEventInit): void;
    invalid(ele: Element, params?: EventInit): void;
    submit(ele: Element, params?: EventInit): void;
    reset(ele: Element, params?: EventInit): void;
    click(ele: Element, params?: MouseEventInit): void;
    contextMenu(ele: Element, params?: MouseEventInit): void;
    dblClick(ele: Element, params?: MouseEventInit): void;
    doubleClick(ele: Element, params?: MouseEventInit): void;
    drag(ele: Element, params?: MouseEventInit): void;
    dragEnd(ele: Element, params?: MouseEventInit): void;
    dragEnter(ele: Element, params?: MouseEventInit): void;
    dragExit(ele: Element, params?: MouseEventInit): void;
    dragLeave(ele: Element, params?: MouseEventInit): void;
    dragOver(ele: Element, params?: MouseEventInit): void;
    drop(ele: Element, params?: MouseEventInit): void;
    mouseDown(ele: Element, params?: MouseEventInit): void;
    mouseEnter(ele: Element, params?: MouseEventInit): void;
    mouseLeave(ele: Element, params?: MouseEventInit): void;
    mouseMove(ele: Element, params?: MouseEventInit): void;
    mouseOut(ele: Element, params?: MouseEventInit): void;
    mouseOver(ele: Element, params?: MouseEventInit): void;
    mouseUp(ele: Element, params?: MouseEventInit): void;
    select(ele: Element, params?: EventInit): void;
    touchCancel(ele: Element, params?: TouchEventInit): void;
    touchEnd(ele: Element, params?: TouchEventInit): void;
    touchMove(ele: Element, params?: TouchEventInit): void;
    touchStart(ele: Element, params?: TouchEventInit): void;
    resize(ele: Element, params?: UIEventInit): void;
    scroll(ele: Element, params?: UIEventInit): void;
    wheel(ele: Element, params?: WheelEventInit): void;
    abort(ele: Element, params?: EventInit): void;
    canPlay(ele: Element, params?: EventInit): void;
    canPlayThrough(ele: Element, params?: EventInit): void;
    durationChange(ele: Element, params?: EventInit): void;
    emptied(ele: Element, params?: EventInit): void;
    encrypted(ele: Element, params?: EventInit): void;
    ended(ele: Element, params?: EventInit): void;
    loadedData(ele: Element, params?: EventInit): void;
    loadedMetadata(ele: Element, params?: EventInit): void;
    loadStart(ele: Element, params?: ProgressEventInit): void;
    pause(ele: Element, params?: EventInit): void;
    play(ele: Element, params?: EventInit): void;
    playing(ele: Element, params?: EventInit): void;
    progress(ele: Element, params?: ProgressEventInit): void;
    rateChange(ele: Element, params?: EventInit): void;
    seeked(ele: Element, params?: EventInit): void;
    seeking(ele: Element, params?: EventInit): void;
    stalled(ele: Element, params?: EventInit): void;
    suspend(ele: Element, params?: EventInit): void;
    timeUpdate(ele: Element, params?: EventInit): void;
    volumeChange(ele: Element, params?: EventInit): void;
    waiting(ele: Element, params?: EventInit): void;
    load(ele: Element, params?: EventInit): void;
    error(ele: Element, params?: EventInit): void;
    animationStart(ele: Element, params?: AnimationEventInit): void;
    animationEnd(ele: Element, params?: AnimationEventInit): void;
    animationIteration(ele: Element, params?: AnimationEventInit): void;
    transitionCancel(ele: Element, params?: TransitionEventInit): void;
    transitionEnd(ele: Element, params?: TransitionEventInit): void;
    transitionRun(ele: Element, params?: TransitionEventInit): void;
    transitionStart(ele: Element, params?: TransitionEventInit): void;
    pointerOver(ele: Element, params?: PointerEventInit): void;
    pointerEnter(ele: Element, params?: PointerEventInit): void;
    pointerDown(ele: Element, params?: PointerEventInit): void;
    pointerMove(ele: Element, params?: PointerEventInit): void;
    pointerUp(ele: Element, params?: PointerEventInit): void;
    pointerCancel(ele: Element, params?: PointerEventInit): void;
    pointerOut(ele: Element, params?: PointerEventInit): void;
    pointerLeave(ele: Element, params?: PointerEventInit): void;
    gotPointerCapture(ele: Element, params?: PointerEventInit): void;
    lostPointerCapture(ele: Element, params?: PointerEventInit): void;
    popState(ele: Element, params?: PopStateEventInit): void;
    offline(ele: Element, params?: EventInit): void;
    online(ele: Element, params?: EventInit): void;
}
declare function fireEvent(element: Element, event: Event): any;
declare function createEvent(eventName: string, node: Element, init: any, { EventType, defaultInit }?: {
    EventType?: string | undefined;
    defaultInit?: {} | undefined;
}): any;
export { fireEvent, createEvent };
